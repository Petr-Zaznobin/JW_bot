import asyncio
import logging
import string
import re
import ast

from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile

import database
from config import *

# logging
logging.basicConfig(
    # level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    level=logging.WARNING,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    handlers=[
        logging.FileHandler("app.log"),  # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª "app.log"
        # logging.StreamHandler()  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# FSM
storage = MemoryStorage()

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# postgresql
database = database.AsyncDatabase(
    db_name=db_name,
    user=user,
    password=password,
    host=host,
    port=port
)

class PhoneState(StatesGroup):
    waiting_for_phone = State()

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    tg_user_id: int = int(message.from_user.id)
    chat_id: int = int(message.chat.id)

    user_exist = await database.user_exists(chat_id)
    if user_exist:
        await main_menu(chat_id)
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å.")
        is_admin = check_admin(tg_user_id)
        if is_admin:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '7xxxxxxxxxx'")
            await state.set_state(PhoneState.waiting_for_phone)

@router.message(PhoneState.waiting_for_phone)
async def process_phone_number(message: Message, state: FSMContext):
    phone_number: str = message.text.strip()
    pattern = re.compile(r'^7\d{10}$')
    if not pattern.match(phone_number):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ '7xxxxxxxxxx'")
        return

    await state.update_data(phone_number=phone_number)
    await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number} –ø–æ–ª—É—á–µ–Ω.")
    await message.answer(
        text="–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ!", callback_data="confirm_phone")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_phone")]
        ])
    )

@router.callback_query(lambda c: c.data == "confirm_phone")
async def callback_confirm_phone(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    phone_number = data.get("phone_number")
    if phone_number is None:
        await callback.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # await database.insert_phone_number(callback.from_user.id, phone_number)

    await callback.message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    await state.clear()
    await main_menu(int(callback.message.chat.id))
    await callback.answer()

@router.callback_query(lambda c: c.data == "change_phone")
async def callback_change_phone(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '7xxxxxxxxxx'")
    await state.set_state(PhoneState.waiting_for_phone)
    await callback.answer()

def check_admin(tg_user_id: string)->bool:
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ .env (–Ω–∞–ø—Ä–∏–º–µ—Ä, "[]" –∏–ª–∏ "[123456789, 987654321]")
    raw_admin_tg_ids = os.getenv("admin_tg_ids", "[]").strip()
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        admin_tg_ids = ast.literal_eval(raw_admin_tg_ids)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ admin_tg_ids: {e}")
        admin_tg_ids = []
    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —á–∏—Å–ª–∞
        admin_ids = [int(x) for x in admin_tg_ids]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ admin_tg_ids –≤ int: {e}")
        admin_ids = []

    return tg_user_id in admin_ids


#---------------------------
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def safely_delete_last_message(tg_user_id, chat_id):
    try:
        last_messages = await database.get_last_messages_by_user_id(tg_user_id)
        if last_messages is not None:
            for message in last_messages:
                try:
                    await bot.delete_message(chat_id=chat_id, message_id=message)
                    # print(f"[Bot] –°–æ–æ–±—â–µ–Ω–∏–µ {message} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
                except Exception as e:
                    # print(f"[Bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}: {str(e)}")
                    continue
            await  database.clear_last_message_ids_by_user_id(tg_user_id)
            # print(f"[DB] –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {tg_user_id}")

            await database.set_last_message_by_user_id(tg_user_id, None)
    except Exception as e:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ safely_delete_last_message: %s", e)


async def main_menu(tg_user_id: int):
    try:
        await bot.send_message(tg_user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!")
    except Exception as e:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ main_menu: %s", e)


#----------------------------

@router.callback_query(lambda call: call.data == "main_menu")
async def MMenu(callback: CallbackQuery):
    try:
        tg_user_id: int = int(callback.from_user.id)
        await main_menu(tg_user_id)
    except Exception as e:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ MMenu: %s", e)


async def on_startup():
    try:
        await database.connect()
    except Exception as e:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ on_startup: %s", e)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
async def main():
    try:
        dp.startup.register(on_startup)
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ main: %s", e)


if __name__ == '__main__':  # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –∫–æ–¥ –≤—ã–∑–≤–∞–Ω –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ
    try:
        asyncio.run(main())
        print("[Bot Running] –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω")
    except Exception as e:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ __name__: %s", e)
